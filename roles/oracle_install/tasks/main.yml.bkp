---
# Copyright (c) IBM Corporation 2021
# tasks file for oracle_install

- name: Creating NFS filesystem from nfshost.
  ibm.power_aix.filesystem:
    device: /repos
    nfs_server: "{{ora_nfs_host}}"
    filesystem: /repos
    state: present
  when: ora_binary_location == 'nfs'

- name: detecting oracle version to install {{ ora_version }}
  set_fact:
    oracle_source_files: "{{oracledbaix19c}}"
  when: ora_version == "19.3.0.0.0"
  
- name: detecting oracle grid version to install {{ ora_version }}
  set_fact:
    oracle_grid_source_files: "{{oraclegridaix19c}}"
  when: 
    - ora_version == "19.3.0.0.0"
    - grid_asm_flag

- name: creating group {{ora_group}} with gid {{ora_group_gid}}
  group:
    name: "{{ora_group}}"
    gid:  "{{ora_group_gid}}"
    state: present

- name: creating group {{ora_oinstall_group}} with gid {{ora_oinstall_group_gid}}
  group:
    name: "{{ora_oinstall_group}}"
    gid:  "{{ora_oinstall_group_gid}}"
    state: present

- name: creating group {{ora_oper_group}} with gid {{ora_oper_group_gid}}
  group:
    name: "{{ora_oper_group}}"
    gid:  "{{ora_oper_group_gid}}"
    state: present

- name: creating user {{ora_user}} with uid {{ora_user_uid}}
  user:
    name: "{{ora_user}}"
    group: "{{ora_oinstall_group}}"
    groups: "{{ora_group}},{{ora_oper_group}}"
    append: yes
    uid: "{{ora_user_uid}}"

- name: creating volume group for OH
  ibm.power_aix.lvg:
    vg_name: "{{ora_sw_vg}}"
    pp_size: 4
    vg_type: scalable
    state: present
    pvs: "{{ora_sw_vg_disk}}"
  when : ora_sw_vg != "rootvg"

- name: create File System for OH
  ibm.power_aix.filesystem:
    filesystem:    "{{ ora_sw_fs }}"
    state: present
    attributes: "size={{ora_sw_fs_size}}"
    vg: "{{ora_sw_vg}}"
    auto_mount: True

- name: mount File System for OH
  ibm.power_aix.mount: 
    mount_dir: "{{ ora_sw_fs }}"
    state: mount
  ignore_errors: yes
  
- name: Checking permission of {{ora_sw_fs}}
  stat:
    path: "{{ora_sw_fs}}"
  register: ora_dir 

- name: creating Oracle Grid Home directory
  file:
    path: "{{grid_ora_home}}"
    state: directory
    mode: '0755'
  when: grid_asm_flag

- name: creating Oracle DB Home directory
  file:
    path: "{{ora_home}}"
    state: directory
    mode: '0755'

- name: creating Oracle Base directory
  file:
    path: "{{ora_base}}"
    state: directory
    mode: '0755'

- name: changing ownership to {{ora_user}} on {{ora_sw_fs}}
  file:
    path: "{{ora_sw_fs}}"
    state: directory
    recurse: yes
    owner: "{{ora_user}}"
    group: "{{ora_group}}"
    mode: '0774'
  when: ora_dir.stat.exists and ora_dir.stat.pw_name != ora_user

- name: RU Name remote
  shell: "expr {{ ru_remote_path }} : '^.*p\\([0-9]*\\)_.*$'"
  register: ru_name
  when: ora_binary_location == 'remote'

- name: RU Name nfs
  shell: "expr {{ ru_nfs_path }} : '^.*p\\([0-9]*\\)_.*$'"
  register : ru_name
  when: ora_binary_location == 'nfs'

- name: RU Name local
  shell: "expr {{ ru_local_path }} : '^.*p\\([0-9]*\\)_.*$'"
  register : ru_name
  when: ora_binary_location == 'local'

- name: Create a RU directory with specific owner
  file:
    path: "{{ru_tgt_path}}"  # Specify the directory path
    state: directory
    owner: "{{ora_user}}"
    group: "{{ora_oinstall_group}}"
    mode: "0755"

- name: Check for "{{ru_tgt_path}}/{{ru_name}}"
  stat:
    path: "{{ru_tgt_path}}/{{ru_name}}"
  register: ru_file

- name: copying RU source files from remote
  unarchive:
    src: "{{item}}"
    dest: "{{ ru_tgt_path }}"
    keep_newer: yes
    owner: "{{ora_user}}"
    group: "{{ora_oinstall_group}}"
  loop:   "{{ ru_remote_path |flatten(levels=1) }}"
  when: (ru_remote_path is defined) and (ru_remote_path | length > 0) and (not ru_file.stat.exists) and (ora_binary_location == 'remote') 

- name: copying RU source files from local
  unarchive:
    src: "{{item}}"
    dest: "{{ ru_tgt_path }}"
    remote_src: true
    keep_newer: yes
    owner: "{{ora_user}}"
    group: "{{ora_oinstall_group}}"
  loop:   "{{ ru_local_path |flatten(levels=1) }}"
  when: (ru_local_path is defined) and (ru_local_path | length > 0) and (not ru_file.stat.exists) and (ora_binary_location == 'local') 

- name: copying RU source files from nfs
  unarchive:
    src: "{{item}}"
    dest: "{{ ru_tgt_path }}"
    remote_src: true
    keep_newer: yes
    owner: "{{ora_user}}"
    group: "{{ora_oinstall_group}}"
  loop:   "{{ ru_nfs_path |flatten(levels=1) }}"
  when: (ru_nfs_path is defined) and (ru_nfs_path | length > 0) and (not ru_file.stat.exists) and (ora_binary_location == 'nfs') 


- name: Grid Installation 
  include_tasks: grid_install.yml
  when: grid_asm_flag

- debug:
    msg: "Starting to Install DB home"

- name: Set {{ora_user}} user env profile
  include_tasks: set_ora_profile.yml

- name: Check for file runInstaller
  stat:
    path: "{{ora_home}}/runInstaller"
  register: ora_file

- name: copying oracle Single instance source files from remote
  unarchive:
    src: "{{item}}"
    dest: "{{ ora_home }}"
    keep_newer: yes
    owner: "{{ora_user}}"
    group: "{{ora_oinstall_group}}"
  loop:   "{{ oracle_source_files |flatten(levels=1) }}"
  when: not ora_file.stat.exists and ora_binary_location == 'remote'

- name: copying oracle Single instance source files from local
  unarchive:
    src: "{{item}}"
    dest: "{{ ora_home }}"
    remote_src: true
    keep_newer: yes
    owner: "{{ora_user}}"
    group: "{{ora_oinstall_group}}"
  loop:   "{{ ora_binary_local_db_loc |flatten(levels=1) }}"
  when: not ora_file.stat.exists and ora_binary_location == 'local'

- name: copying oracle Single instance source files from nfs
  unarchive:
    src: "{{item}}"
    dest: "{{ ora_home }}"
    remote_src: true
    keep_newer: yes
    owner: "{{ora_user}}"
    group: "{{ora_oinstall_group}}"
  loop:   "{{ ora_nfs_oracle_db_binary |flatten(levels=1) }}"
  when: not ora_file.stat.exists and ora_binary_location == 'nfs'

- name: Generating oracle response file Template a file to /tmp/oracle_install_rsp_file{{ansible_date_time.epoch}}.rsp
  template:
    src: ../templates/oracle19c_install.rsp
    dest: "/tmp/oracle_install_rsp_file{{ansible_date_time.epoch}}.rsp"
    owner: "{{ora_user}}"
    group: "{{ora_group}}"
    mode: '0644'

- name: Running rootpre.sh
  shell: "{{ora_home}}/clone/rootpre.sh"

- name: install-home-db | Install Oracle Database Server
  shell: "{{ora_home}}/runInstaller -responseFile /tmp/oracle_install_rsp_file{{ansible_date_time.epoch}}.rsp -applyRU {{ru_tgt_path}}/{{ru_name}} -ignorePrereqFailure -silent -waitforcompletion"
  become: yes
  become_method: su
  become_user: "{{ora_user}}"
  environment:
    SKIP_ROOTPRE: "TRUE"
  register: rdbms_install
  failed_when: (rdbms_install.rc not in [0,6,254])
# 0 --> Successfull , 6 --> Successfull with Warnings, 254 --> DBhome Already Installed
  when: ignoreprecheck


- name: install-home-db | Install Oracle Database Server
  shell: "{{ora_home}}/runInstaller -responseFile /tmp/oracle_install_rsp_file{{ansible_date_time.epoch}}.rsp -applyRU {{ru_tgt_path}}/{{ru_name}} -silent -waitforcompletion"
  become: yes
  become_method: su
  become_user: "{{ora_user}}"
  environment:
    SKIP_ROOTPRE: "TRUE"
  register: rdbms_install
  failed_when: (rdbms_install.rc not in [0,6,254])
# 0 --> Successfull , 6 --> Successfull with Warnings, 254 --> DBhome Already Installed
  when: not ignoreprecheck

- debug:
    msg: "runInstaller output :: {{rdbms_install}}"

- name: Running orainstRoot.sh
  shell:
    cmd: "{{ora_inventory}}/orainstRoot.sh"

- name: Running root.sh
  shell:
    cmd: "{{ora_home}}/root.sh"
  register: rootscript

- debug:
    msg: "root.sh output :: {{rootscript}}"
